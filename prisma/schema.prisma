// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacje
  purchases Purchase[]
  progress  Progress[]
  courses   Course[]    @relation("CourseCreator")

  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  imageUrl    String?
  published   Boolean  @default(false)
  category    String   @default("Programowanie")
  level       String   @default("Początkujący")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacje
  creatorId String
  creator   User     @relation("CourseCreator", fields: [creatorId], references: [id])
  lessons   Lesson[]
  purchases Purchase[]
  progress  Progress[]

  @@map("courses")
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  content     String
  videoUrl    String?
  duration    Int      // w minutach
  order       Int
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacje
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress Progress[]

  @@map("lessons")
}

model Purchase {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  amount    Float
  status    PurchaseStatus @default(PENDING)
  createdAt DateTime @default(now())

  // Relacje
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
  @@map("purchases")
}

model Progress {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  lessonId  String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacje
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
  @@map("progress")
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
